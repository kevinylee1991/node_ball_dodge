<script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script>
	$(document).ready(function(){

	io = io.connect();
	name = prompt("Please enter your name");

	io.emit('new_player', {name: name});

	var time_start = 0;
	// var time_start = new Date().getTime();

	function make_circle(cx, cy, session_id, color) {
        var el= document.createElementNS('http://www.w3.org/2000/svg', 'circle');
		el.setAttribute('id', session_id);
		el.setAttribute('r', 15);
		el.setAttribute('cx', cx);
		el.setAttribute('cy', cy);
		el.setAttribute('style', 'fill: '+color);
		document.getElementById('svg').appendChild(el);
    };

    function KillerCircle(cx, cy, r, x_velocity, y_velocity, id, color){ //killer circle constructor

    	var randomNumberBetween = function(min, max){
			return Math.random()*(max-min+1) + min;
		}

		this.circle_id = id;
		this.info = {};

	    this.initialize = function(){ //creates new killer circle out of bounds

	    	var el= document.createElementNS('http://www.w3.org/2000/svg', 'circle');

	    	el.setAttribute('id', this.circle_id);
			el.setAttribute('r', r);
			this.info.r = r;
			el.setAttribute('cx', cx);
			this.info.cx = cx;
			el.setAttribute('cy', cy);
			this.info.cy = cy;
			el.setAttribute('style', "fill: " + color);
			this.info.color = color;

			this.info.velocity = {
				x: x_velocity,
				y: y_velocity
			};		

			document.getElementById('svg').appendChild(el);
	    };

	    this.update = function(){ //update position of circles
	    	var el = document.getElementById(this.circle_id);

	    	this.info.cx = this.info.cx + this.info.velocity.x;
			this.info.cy = this.info.cy + this.info.velocity.y;

			el.setAttribute("cx", this.info.cx);
			el.setAttribute("cy", this.info.cy);
	    };

	    this.initialize();
	};

    function PlayGround()
	{
		var counter = 0;  //counts the number of circles created
		var circles = [ ]; //array that will hold all the circles created in the app
		var powerups = [ ];

		//a loop that updates the circle's position on the screen
		this.loop = function(){
			for(circle in circles)
			{
				circles[circle].update();
			}
			destroy_circle();
			collision();
			if (powerups.length > 0)
			{
				for(powerup in powerups)
				{
					powerups[powerup].update();
				}
				got_powerup();
			}
		}

		this.createNewPowerup = function(cx, cy, r, x_velocity, y_velocity){
			var new_circle = new KillerCircle(cx, cy, r, x_velocity, y_velocity, counter++, 'yellow');
			powerups.push(new_circle);
		}

		this.createNewCircle = function(cx, cy, r, x_velocity, y_velocity){
			var new_circle = new KillerCircle(cx, cy, r, x_velocity, y_velocity, counter++, 'black');
			circles.push(new_circle);
			// console.log('created a new circle!', new_circle);
		}

		function collision(){
			var player = document.getElementById('player');
			if (player != null)
			{
				var player_cx = player.getAttribute('cx');
				var player_cy = player.getAttribute('cy');
				for (circle in circles){
					var x_distance = Math.pow((circles[circle].info.cx - player_cx), 2);
					var y_distance = Math.pow((circles[circle].info.cy - player_cy), 2);
					var total_distance = Math.sqrt(x_distance+y_distance);
					if (total_distance < (circles[circle].info.r + 15))
					{
						if (time_start != 0)
						{
							var time_end = new Date().getTime();
							var total_time = time_end - time_start;
							if (total_time > 100){
								$('#score').html('You just scored '+total_time+' points');
								io.emit('send_score', {score: total_time});
								$('#player').remove();
							}
						}
						time_start = new Date().getTime();
					}
				}
			}
		}

		function got_powerup(){
			var player = document.getElementById('player');
			if (player != null)
			{
				var player_cx = player.getAttribute('cx');
				var player_cy = player.getAttribute('cy');
				if (powerups.length > 0)
				{
					for (powerup in powerups){
						var x_distance = Math.pow((powerups[powerup].info.cx - player_cx), 2);
						var y_distance = Math.pow((powerups[powerup].info.cy - player_cy), 2);
						var total_distance = Math.sqrt(x_distance+y_distance);
						var jquery_id = '#' + powerups[powerup].circle_id;
						if (total_distance < (powerups[powerup].info.r + 15))
						{
							$(jquery_id).remove();
							delete powerups[powerup];
							console.log('got powerup');
							io.emit('got_powerup', {});
						}
					}
				}
			}
		}

		this.removePowerups = function(){
			for (powerup in powerups){
				var jquery_id = '#' + powerups[powerup].circle_id;
				$(jquery_id).remove();
				delete powerups[powerup];
			}
		}

		function destroy_circle(){
			for (circle in circles){
				var jquery_id = '#' + circles[circle].circle_id;

				if(circles[circle].info.cx < -200 || circles[circle].info.cx > 1200)
				{
					$(jquery_id).remove();
					delete circles[circle]; //unsure if this works
					return;
				}

				if(circles[circle].info.cy < -200 || circles[circle].info.cy > 1000)
				{
					$(jquery_id).remove();
					delete circles[circle];
					return;
				}
			}

			for (powerup in powerups){
				var jquery_id = '#' + powerups[powerup].circle_id;

				if(powerups[powerup].info.cx < -200 || powerups[powerup].info.cx > 1200)
				{
					$(jquery_id).remove();
					delete powerups[powerup]; //unsure if this works
					return;
				}

				if(powerups[powerup].info.cy < -200 || powerups[powerup].info.cy > 1000)
				{
					$(jquery_id).remove();
					delete powerups[powerup];
					return;
				}
			}
		}
	};

	io.on('existing_players', function(data){
		var player_info = data.players;

		for(var i = 0; i < player_info.length; i++)
		{
			make_circle(0, 0, player_info[i].session_id, 'green');
			// $('#svg').append("<circle id='"+player_info[i].session_id+
			// 	"' cx='20' cy='20' r='15'></circle>");

			$('#scoreboard').append("<p>"+player_info[i].name+": "+player_info.high_score+"</p>");
		};
		$('#scoreboard').append("<p>"+name+": 0</p>")
	})

	io.on('added_new_player', function(data){
		// $('#svg').append("<circle id='"+data.session_id+
		// 	"' cx='20' cy='20' r='15'></circle>");
		make_circle(0, 0, data.session_id, 'green');

		$('#scoreboard').append("<p>"+data.name+": 0</p>");
	});

	io.on('disconnect_user', function(data){
		var remove_id = '#' + data.session_id;
		$(remove_id).remove();
		var player_info = data.players;
		$('#scoreboard').html('<h2>Top Scores</h2>');
		for(var i = 0; i < player_info.length; i++)
		{
			$('#scoreboard').append("<p>"+player_info[i].name+": "+player_info[i].high_score+"</p>");
		};
	});

	io.on('player_died', function(data){
		var jquery_id = "#"+data.player_id;
		$(jquery_id).remove(); 
	});

	io.on('other_move', function(data){
		// var circle = document.getElementById(data.session_id);
		var circle = document.getElementById(data.session_id);
		circle.setAttribute('cx', data.cx);
		circle.setAttribute('cy', data.cy);
	});

	io.on('new_score', function(data){ //refreshes scoreboard
		var player_info = data.players;
		// player_info.sort(function(obj1, obj2){
		// 	return obj1.high_score - obj2.high_score;
		// });
		$('#scoreboard').html('<h2>Top Scores</h2>');
		for(var i = 0; i < player_info.length; i++)
		{
			$('#scoreboard').append("<p>"+player_info[i].name+": "+player_info[i].high_score+"</p>");
		};
	});

	var playground = new PlayGround();
	setInterval(playground.loop, 15);


	io.on('new_ball', function(data){
		playground.createNewCircle(data.cx, data.cy, data.r, data.x_velocity, data.y_velocity);
	});

	io.on('new_powerup', function(data){
		playground.createNewPowerup(data.cx, data.cy, data.r, data.x_velocity, data.y_velocity);
	});

	io.on('other_powerup', function(data){
		playground.removePowerups();
		playground.createNewCircle(data.cx, data.cy, 200, data.x_velocity, data.y_velocity);
	});

	$('svg').click(function(e){
		var circle = document.getElementById('player');
		if(circle == null)
		{
			time_start = new Date().getTime();
			make_circle(e.pageX, e.pageY, 'player', 'blue');
			io.emit('made_new_circle', {cx: e.pageX, cy: e.pageY});
		}
	});

	io.on('other_new_circle', function(data){
		var circle = document.getElementById(data.player_id);
		if (circle == null)
		{
			make_circle(data.cx, data.cy, data.player_id, 'green');
		}
	});

});
	
</script>

<!DOCTYPE html>
<html>
<head>
    <title>Ball Dodge</title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <script>
    $(document).ready(function(){
	    $('svg').mousemove(function(e){
	    	var circle = document.getElementById('player');
	    	if(circle != null)
	    	{
		    	circle.setAttribute('cx', e.pageX);
		    	circle.setAttribute('cy', e.pageY);
		    	io.emit('moved_mouse', {cx: e.pageX, cy: e.pageY});
		    }
	    });
	});
    </script>
</head>
<body>
	<svg id="svg" xmlns="http://www.w3.org/2000/svg">
		<circle id='player' cx='30%' cy='30%' r='15' style='fill: blue'></circle>
	</svg>
	<div id='player_score'>
		<h2 id='score'>Get hit by a ball to start scoring</h2>
		<p>Click anywhere to create a new ball when dead</p>
		<div id='scoreboard'>
			<h2>Top Scores</h2>
		</div>
	</div>
</body>
</html>